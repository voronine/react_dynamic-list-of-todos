{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","components/helper.ts","index.tsx"],"names":["ForFilteredTodos","TodoList","todos","selectedTodoId","getSelectedTodo","className","map","todo","isSelected","cn","id","completed","title","type","onClick","TodoFilter","query","getSetQuery","selectedFilter","getSelectedFilter","value","onChange","event","target","Object","entries","key","placeholder","style","pointerEvents","all","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","catch","error","console","log","finally","href","email","name","App","selectedTodo","state","setState","response","prevState","Error","filteredOfTodos","useMemo","preparedTodo","filter","toLowerCase","includes","noCompleted","forFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6157b468.chunk.js","sourcesContent":["export enum ForFilteredTodos {\n  all = 'all',\n  noCompleted = 'noCompleted',\n  completed = 'completed',\n}\n\ntype Props = {\n  query: string;\n  getSetQuery: (value: string) => void;\n  selectedFilter: string;\n  getSelectedFilter: (value: ForFilteredTodos) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  getSetQuery,\n  selectedFilter,\n  getSelectedFilter,\n}) => {\n  const reset = () => {\n    getSetQuery('');\n    getSelectedFilter(ForFilteredTodos.all);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={(event) => {\n              getSelectedFilter(event.target?.value as ForFilteredTodos);\n            }}\n          >\n            {Object.entries(ForFilteredTodos).map(([key, value]) => (\n              <option value={value} key={key}>\n                {value}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => getSetQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"Clear Search\"\n            onClick={reset}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import cn from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId?: Todo | null;\n  getSelectedTodo?: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  getSelectedTodo = () => { },\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const isSelected = selectedTodoId === todo;\n\n        return (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': isSelected,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => getSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={cn('far', {\n                    'fa-eye': !isSelected,\n                    'fa-eye-slash': isSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo;\n  getSelectedTodo: (value: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, getSelectedTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (todo?.userId) {\n      getUser(todo?.userId)\n        .then(setUser)\n        .catch((error) => {\n          // eslint-disable-next-line no-console\n          console.log(error);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [todo?.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Modal Close\"\n              data-cy=\"modal-close\"\n              onClick={() => getSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { ForFilteredTodos, TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { forFilteredTodos } from './components/helper';\n\ntype State = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  isLoading: boolean;\n  query: string;\n  selectedFilter: ForFilteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const [state, setState] = useState<State>({\n    todos: [],\n    selectedTodo: null,\n    isLoading: true,\n    query: '',\n    selectedFilter: ForFilteredTodos.all,\n  });\n\n  useEffect(() => {\n    getTodos()\n      .then((response) => {\n        setState(prevState => ({ ...prevState, todos: response }));\n      })\n      .catch((error) => {\n        throw new Error(`Error:${error}`);\n      })\n      .finally(() => setState(prevState => ({ ...prevState, isLoading: false })));\n  }, []);\n\n  const filteredOfTodos = useMemo(() => {\n    return forFilteredTodos(state.todos, state.query, state.selectedFilter);\n  }, [state.todos, state.query, state.selectedFilter]);\n\n  const getSetQuery = (query: string) => {\n    setState((prevState: State) => ({ ...prevState, query }));\n  };\n\n  const getSelectedFilter = (selectedFilter: ForFilteredTodos) => {\n    setState((prevState: State) => ({ ...prevState, selectedFilter }));\n  };\n\n  const getSelectedTodo = (selectedTodo: Todo | null) => {\n    setState((prevState: State) => ({ ...prevState, selectedTodo }));\n  };\n\n  const {\n    query,\n    selectedFilter,\n    isLoading,\n    selectedTodo,\n  } = state;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                getSetQuery={getSetQuery}\n                selectedFilter={selectedFilter}\n                getSelectedFilter={getSelectedFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredOfTodos}\n                  getSelectedTodo={getSelectedTodo}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          getSelectedTodo={getSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { ForFilteredTodos } from './TodoFilter';\n\nexport const forFilteredTodos = (\n  todos: Todo[],\n  query: string,\n  selectedFilter: ForFilteredTodos,\n) => {\n  let preparedTodo = [...todos];\n\n  if (query) {\n    preparedTodo = todos.filter(({ title }) => {\n      return title.toLowerCase().includes(query.toLowerCase());\n    });\n  }\n\n  if (selectedFilter) {\n    switch (selectedFilter) {\n      case ForFilteredTodos.noCompleted:\n        return preparedTodo.filter(({ completed }) => !completed);\n      case ForFilteredTodos.completed:\n        return preparedTodo.filter(({ completed }) => completed);\n      default:\n        return preparedTodo;\n    }\n  }\n\n  return preparedTodo;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}